import os
import gdspy
import meshio
import pygmsh
import collections

from yuna.poly_ops import convvert_nparray_to_list


class MetaMask(type):
    @classmethod
    def __prepare__(cls, name, bases, **kwds):
        return collections.OrderedDict()

    def __new__(cls, name, bases, attrs):
        cls = super().__new__(cls, name, bases, dict(attrs))

        if not hasattr(cls, 'registry'):
            cls.registry = {}

        cls.registry[name] = cls

        return cls

    def __init__(cls, name, bases, attrs):
        super().__init__(name, bases, dict(attrs))

    def __call__(cls, *args, **kwargs):
        cls = super().__call__(*args, **kwargs)
        return cls


class MaskPolygon(gdspy.PolygonSet, metaclass=MetaMask):

    def __init__(self, polygons, **kwargs):

        if kwargs:
            self.layer = kwargs['layer']
            self.datatype = kwargs['datatype']
        else:
            self.layer = 0
            self.datatype = 0

        verbose = False

        super().__init__(polygons, layer=self.layer, 
                         datatype=self.datatype, verbose=verbose)

    def __str__(self):
        return ("Yuna -> PolygonSet ({} polygons, {} vertices, layers {}, "
                "datatypes {})").format(
                len(self.polygons), sum([len(p) for p in self.polygons]),
                list(set(self.layers)), list(set(self.datatypes)))

    def __add__(self, other):
        if self.layer == other.layer:
            pass
        else:
            raise ValueError('To add masks the polygon layers must be the same.')

    def geom_surfaces(self, geom, surfaces):
        """
        Create a list of GMSH surfaces from the mask polygons
        generated by the Yuna package.

        Arguments
        ---------
        surfaces : list
            List of pygmsh surface objects.
        """

        for i, points in enumerate(self.polygons):
            surface_label = '{}_{}_{}'.format(self.layer, self.datatype, i)

            pp = convvert_nparray_to_list(points)

            gp = geom.add_polygon(pp, lcar=1.0, make_surface=True)
            geom.add_physical_surface(gp.surface, label=surface_label)

            surfaces.append(gp.surface)

    def get(self):
        return gdspy.PolygonSet(self.polygons, self.layer, self.datatype)